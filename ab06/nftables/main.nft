#!/usr/sbin/nft -f
# vi: ft=nftables
# /etc/nftables/main.nft

flush ruleset


table inet main {
    # dn42 interfaces
    set dn42_interfaces {
        type ifname
        elements = {
            "ztbtosre7x",
            "wg0207rbitslax",
            "wg2189iedonlax",
            "wg2717hujklax",
            "wg3035lareusw1",
            "wg3088sunnetlax",
            "wg3914kiouus3",
            # __MAKE_PEERING_MARKER Do not remove this comment
        }
    }
    # dn42 assigned addresses
    define dn42_self_ipv4 = 172.23.6.162
    define dn42_self_ipv6 = fdc0:d227:306:ee01::2
    # dn42 services on this host
    set dn42_ports {
        type inet_proto . inet_service
        elements = {
            tcp . domain,
            udp . domain,
        }
    }

    # Public interface
    set public_interfaces {
        type ifname
        elements = { "wlrpi" }
    }

    # LAN interface
    set lan_interfaces {
        type ifname
        elements = { "brlan" }
    }

    # AREDN interfaces
    set aredn_interfaces {
        type ifname
        elements = { "wgarednkk6uc" }
    }

    include "/etc/nftables/dn42-chains.nft"
    include "/etc/nftables/shared-chains.nft"
    include "/etc/nftables/public-chains.nft"
    include "/etc/nftables/aredn-chains.nft"
    include "/etc/nftables/lan-chains.nft"

    # LAN bridge flowtable
    flowtable fastpath {
        hook ingress priority filter + 10
        devices = { "brlan", "wlrpi" }
    }

    chain nat_POSTROUTING {
        type nat hook postrouting priority srcnat + 10; policy accept;
        oifname @public_interfaces goto nat_POST_public
        oifname @dn42_interfaces goto nat_POST_dn42
        oifname @aredn_interfaces goto nat_POST_aredn
        oifname @lan_interfaces goto nat_POST_lan
        goto nat_POST_public
    }

    chain filter_INPUT {
        type filter hook input priority filter + 10; policy drop;
        ct state { established, related } accept
        ct status dnat accept
        iifname "lo" accept
        ct state invalid log prefix "INPUT_STATE_INVALID_DROP: " drop
        iifname @public_interfaces jump filter_IN_public
        iifname @dn42_interfaces jump filter_IN_dn42
        iifname @aredn_interfaces jump filter_IN_aredn
        iifname @lan_interfaces jump filter_IN_lan
        jump filter_IN_public
        # Should have reached a decision by now
        log prefix "filter_INPUT_FINAL_REJECT: " counter reject with icmpx admin-prohibited
    }

    chain filter_FORWARD {
        type filter hook forward priority filter + 10; policy drop;
        ct state { established, related } accept
        ct state established flow offload @fastpath
        ct status dnat accept
        iifname "lo" accept
        iifname @dn42_interfaces jump filter_FWD_dn42
        iifname @dn42_interfaces oifname @lan_interfaces accept
        iifname @public_interfaces jump filter_FWD_public
        iifname @aredn_interfaces jump filter_FWD_aredn
        iifname @lan_interfaces jump filter_FWD_lan
        jump filter_FWD_public
        jump filter_policy_drop_martian
        # These are immune from conntrack drop
        iifname @dn42_interfaces oifname @dn42_interfaces return
        iifname @aredn_interfaces oifname @aredn_interfaces return
        ct state invalid log prefix "FORWARD_STATE_INVALID_DROP: " drop
        # Should have reached a decision by now
        log prefix "filter_FORWARD_FINAL_REJECT: " counter reject with icmpx admin-prohibited
    }
}
